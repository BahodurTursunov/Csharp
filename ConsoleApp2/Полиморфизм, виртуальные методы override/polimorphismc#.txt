полиморфизм - это инструмент в ооп который может использоваться при наследовании.
Допустим у нас есть некий класс Car, и в этом классе у нас реализован метод Drive, исходя из прошлых уроков
где мы рассматривали наследование, мы знаем, что если мы создадим другой класс и унаследуем этот класс 
от класса Car, то в нашем новом классе, старый метод Drive, который был реализован в базовом классе тоже 
будет присутствовать. Потому что класс наследник содержит все то, что было реализовано в его базовом классе.
Но что если мы хотим чтобы в нашем базовом классе метод Drive работал как-то по-другому? (выполнял какуюто другую логику).
Полиморфизм предоставляет нам эту возможность, с помощью ключевых слов virtual и override, мы можем переопределить
работу метода Drive в классе наследнике, и он будет вести себя как то по другому, но для чего нам нужны все
эти сложности, почему бы нам не создать просто какойто другой метод с новой реализацией или же просто
создать другой класс и реализовать там нужное нам поведение. 
В чем вообще преимущество переопределения методов и в чем суть полиморфизма?
Дело в том, что у нас уже может быть какаято реализация кода в нашей программе которая использует класс Car 
И конкретно в нашем примере у нас есть класс Person, у которого тоже есть метод Drive, который в качестве 
параметра принимает экземпляр класса Car, и вызывает у него метод Drive, таким образом у нас описан
некий человек, который может водить машину, если мы взглянем на то, как этот метод используется в методе main

